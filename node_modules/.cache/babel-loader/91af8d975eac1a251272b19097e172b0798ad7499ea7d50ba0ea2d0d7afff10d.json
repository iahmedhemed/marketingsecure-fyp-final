{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iahme\\\\marketingsecure\\\\src\\\\components\\\\quizzes\\\\PhishingQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PhishingQuiz.css'; // Ensure your CSS is linked\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PhishingQuiz = () => {\n  _s();\n  const navigate = useNavigate();\n  const questions = [{\n    id: 1,\n    question: 'What should you do if you receive a suspicious phishing email?',\n    options: [{\n      text: 'Click the link immediately.',\n      correct: false\n    }, {\n      text: 'Verify the email sender before clicking.',\n      correct: true\n    }, {\n      text: 'Forward the email to your IT department and wait for instructions.',\n      correct: false\n    }, {\n      text: 'Ignore the email and carry on as usual.',\n      correct: false\n    }]\n  }, {\n    id: 2,\n    question: 'Which of the following is a common sign of phishing?',\n    options: [{\n      text: 'A suspiciously urgent message',\n      correct: true\n    }, {\n      text: 'The email is personalized with your full name',\n      correct: false\n    }, {\n      text: 'The email domain matches the legitimate company',\n      correct: false\n    }, {\n      text: 'The email contains a friendly greeting',\n      correct: false\n    }]\n  }, {\n    id: 3,\n    question: 'How can you verify if a link in an email is legitimate?',\n    options: [{\n      text: 'Hover over the link and check the URL',\n      correct: true\n    }, {\n      text: 'Click on it to see where it redirects',\n      correct: false\n    }, {\n      text: 'Check if the link is from a known email address',\n      correct: false\n    }, {\n      text: 'None of the above',\n      correct: false\n    }]\n  }, {\n    id: 4,\n    question: 'If you have clicked on a phishing link, what should you do?',\n    options: [{\n      text: 'Change your password immediately, and report to IT if possible',\n      correct: true\n    }, {\n      text: 'Ignore it and move on',\n      correct: false\n    }, {\n      text: 'Wait for the attacker to contact you again',\n      correct: false\n    }, {\n      text: 'Restart your computer',\n      correct: false\n    }]\n  }];\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const handleAnswerSelection = index => {\n    setSelectedOption(index);\n  };\n  const handleNextQuestion = () => {\n    if (selectedOption !== null) {\n      const currentQuestion = questions[currentQuestionIndex];\n      if (currentQuestion.options[selectedOption].correct) {\n        setCorrectAnswers(prev => prev + 1);\n      }\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(prev => prev + 1);\n        setSelectedOption(null); // Reset selection for next question\n      } else {\n        setQuizCompleted(true);\n      }\n    }\n  };\n  const handleRetry = () => {\n    setCurrentQuestionIndex(0);\n    setCorrectAnswers(0);\n    setQuizCompleted(false);\n    setSelectedOption(null);\n  };\n  const handleReturnToLesson = () => {\n    navigate('/lessons/phishing'); // Redirect to the relevant lesson\n  };\n  const handleNextLesson = () => {\n    navigate('/lessons/password-security'); // Redirect to the next lesson\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phishing Attack Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), !quizCompleted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerSelection(index),\n          className: selectedOption === index ? 'selected' : '',\n          children: option.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-buttons\",\n        children: [currentQuestionIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentQuestionIndex(prevIndex => prevIndex - 1),\n          children: \"Previous Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Quiz Finished!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You got \", correctAnswers, \" out of \", questions.length, \" correct.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), correctAnswers === questions.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextLesson,\n          className: \"next-lesson-btn\",\n          children: \"Next Lesson\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRetry,\n          className: \"retry-btn\",\n          children: \"Retry Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRetry,\n          className: \"retry-btn\",\n          children: \"Retry Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReturnToLesson,\n          className: \"return-btn\",\n          children: \"Return to Lesson\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(PhishingQuiz, \"W2NxHfaOp93pM4AC8X/7VQdgztQ=\", false, function () {\n  return [useNavigate];\n});\n_c = PhishingQuiz;\nexport default PhishingQuiz;\nvar _c;\n$RefreshReg$(_c, \"PhishingQuiz\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","PhishingQuiz","_s","navigate","questions","id","question","options","text","correct","selectedOption","setSelectedOption","currentQuestionIndex","setCurrentQuestionIndex","correctAnswers","setCorrectAnswers","quizCompleted","setQuizCompleted","handleAnswerSelection","index","handleNextQuestion","currentQuestion","prev","length","handleRetry","handleReturnToLesson","handleNextLesson","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","onClick","prevIndex","_c","$RefreshReg$"],"sources":["C:/Users/iahme/marketingsecure/src/components/quizzes/PhishingQuiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PhishingQuiz.css'; // Ensure your CSS is linked\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst PhishingQuiz = () => {\r\n  const navigate = useNavigate();\r\n  const questions = [\r\n    {\r\n      id: 1,\r\n      question: 'What should you do if you receive a suspicious phishing email?',\r\n      options: [\r\n        { text: 'Click the link immediately.', correct: false },\r\n        { text: 'Verify the email sender before clicking.', correct: true },\r\n        { text: 'Forward the email to your IT department and wait for instructions.', correct: false },\r\n        { text: 'Ignore the email and carry on as usual.', correct: false }\r\n      ]\r\n    },\r\n    {\r\n      id: 2,\r\n      question: 'Which of the following is a common sign of phishing?',\r\n      options: [\r\n        { text: 'A suspiciously urgent message', correct: true },\r\n        { text: 'The email is personalized with your full name', correct: false },\r\n        { text: 'The email domain matches the legitimate company', correct: false },\r\n        { text: 'The email contains a friendly greeting', correct: false }\r\n      ]\r\n    },\r\n    {\r\n      id: 3,\r\n      question: 'How can you verify if a link in an email is legitimate?',\r\n      options: [\r\n        { text: 'Hover over the link and check the URL', correct: true },\r\n        { text: 'Click on it to see where it redirects', correct: false },\r\n        { text: 'Check if the link is from a known email address', correct: false },\r\n        { text: 'None of the above', correct: false }\r\n      ]\r\n    },\r\n    {\r\n      id: 4,\r\n      question: 'If you have clicked on a phishing link, what should you do?',\r\n      options: [\r\n        { text: 'Change your password immediately, and report to IT if possible', correct: true },\r\n        { text: 'Ignore it and move on', correct: false },\r\n        { text: 'Wait for the attacker to contact you again', correct: false },\r\n        { text: 'Restart your computer', correct: false }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n\r\n  const handleAnswerSelection = (index) => {\r\n    setSelectedOption(index);\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (selectedOption !== null) {\r\n      const currentQuestion = questions[currentQuestionIndex];\r\n      if (currentQuestion.options[selectedOption].correct) {\r\n        setCorrectAnswers((prev) => prev + 1);\r\n      }\r\n\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        setCurrentQuestionIndex((prev) => prev + 1);\r\n        setSelectedOption(null); // Reset selection for next question\r\n      } else {\r\n        setQuizCompleted(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRetry = () => {\r\n    setCurrentQuestionIndex(0);\r\n    setCorrectAnswers(0);\r\n    setQuizCompleted(false);\r\n    setSelectedOption(null);\r\n  };\r\n\r\n  const handleReturnToLesson = () => {\r\n    navigate('/lessons/phishing'); // Redirect to the relevant lesson\r\n  };\r\n\r\n  const handleNextLesson = () => {\r\n    navigate('/lessons/password-security'); // Redirect to the next lesson\r\n  };\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-card\">\r\n      <h2>Phishing Attack Quiz</h2>\r\n      {!quizCompleted ? (\r\n        <>\r\n          <div className=\"question\">\r\n            <p>{currentQuestion.question}</p>\r\n          </div>\r\n          <div className=\"options\">\r\n            {currentQuestion.options.map((option, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleAnswerSelection(index)}\r\n                className={selectedOption === index ? 'selected' : ''}\r\n              >\r\n                {option.text}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <div className=\"navigation-buttons\">\r\n            {currentQuestionIndex > 0 && (\r\n              <button onClick={() => setCurrentQuestionIndex((prevIndex) => prevIndex - 1)}>\r\n                Previous Question\r\n              </button>\r\n            )}\r\n            <button onClick={handleNextQuestion}>Next Question</button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"result\">\r\n          <h3>Quiz Finished!</h3>\r\n          <p>You got {correctAnswers} out of {questions.length} correct.</p>\r\n          {correctAnswers === questions.length ? (\r\n            <div className=\"result-buttons\">\r\n              <button onClick={handleNextLesson} className=\"next-lesson-btn\">\r\n                Next Lesson\r\n              </button>\r\n              <button onClick={handleRetry} className=\"retry-btn\">\r\n                Retry Quiz\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"result-buttons\">\r\n              <button onClick={handleRetry} className=\"retry-btn\">\r\n                Retry Quiz\r\n              </button>\r\n              <button onClick={handleReturnToLesson} className=\"return-btn\">\r\n                Return to Lesson\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhishingQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}